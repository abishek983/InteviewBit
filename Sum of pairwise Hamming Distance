//https://www.interviewbit.com/problems/sum-of-pairwise-hamming-distance/

//Use the property that a number has max of 32 bits
//for every bit of the number we need to check how many integers in the array are set and how many are unset
//then we multiply the set and unset to get the pairs
//multipy it by 2 as (A,B) & (B,A) are considered different pairs 
//Time Complexity : O(n)

int Solution::hammingDistance(const vector<int> &A) {
    long long int ans = 0; int n = A.size();
    int mod = 1000000007;
    int temp = 1;
    for(int i=0;i<32;i++){
        long long int count = 0;
        for(int j=0;j<n;j++){
            if(A[j]&temp)
                count++;
        }
        ans = ans+((count%mod * (n-count)%mod)*2)%mod;
        ans = ans%mod;
        temp = temp << 1;
    }
    return (int)ans;
}
